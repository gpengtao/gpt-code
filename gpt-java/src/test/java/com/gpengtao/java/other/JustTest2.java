package com.gpengtao.java.other;

import com.google.common.base.Splitter;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.junit.Test;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * @author pengtao.geng on 2020/3/18 2:02 下午
 */
public class JustTest2 {

	@Test
	public void test_1() {
		String str = "112,344\t5\n" +
				"115\t5\n" +
				"182\t5\n" +
				"15,160\t5\n" +
				"37\t5\n" +
				"10,16\t5\n" +
				"6\t5\n" +
				"5,8,89\t5\n" +
				"13\t5\n" +
				"231\t5\n" +
				"14\t5\n" +
				"2\t5\n" +
				"4,209,232\t5\n" +
				"94,101,194,196,327,338,366,374,385,387,398,399,400,408,432,470,520,533,535,546,555,556\t5\n" +
				"1,153\t5\n" +
				"345\t5\n" +
				"72,329,375,422,478,540\t5\n" +
				"70,197,347,414,443,446,472,473,521,534\t2\n" +
				"71\t2\n" +
				"74\t2\n" +
				"223,542\t5\n" +
				"367,371,410\t5\n" +
				"7,158,487,493,494\t5\n" +
				"11,202\t5\n" +
				"131\t2\n" +
				"132\t2\n" +
				"133,164\t2\n" +
				"134,165\t2\n" +
				"163\t2\n" +
				"162\t2\n" +
				"135,166\t2\n" +
				"136,167\t2\n" +
				"168\t2\n" +
				"137\t2\n" +
				"12\t2\n" +
				"425\t2\n" +
				"441\t2\n" +
				"201,203\t5\n" +
				"69,204\t5\n" +
				"479\t5\n" +
				"550,551,553\t2\n" +
				"2101,2152,2202\t3\n" +
				"2203,2204,2153,2154,2024,2025\t2\n" +
				"2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226\t4";

		List<String> list = Splitter.on("\n").splitToList(str);

		Map<String, List<Integer>> map = Maps.newHashMap();
		list.forEach(one -> {
			List<String> idAndLevel = Splitter.on("\t").splitToList(one);

			List<String> strs = Splitter.on(",").trimResults().splitToList(idAndLevel.get(0));
			for (String s : strs) {
				if (s.isEmpty()) {
					int a;
				}
			}
			List<Integer> ids = strs.stream()
					.map(Integer::parseInt)
					.collect(Collectors.toList());
			String level = idAndLevel.get(1);

			map.merge(level, ids, (x, y) -> {
				List<Integer> all = Lists.newArrayList();
				all.addAll(x);
				all.addAll(y);
				all.sort(Integer::compareTo);
				return all;
			});
		});

		System.out.println(map);

		System.out.println(map.values().stream().flatMap(Collection::stream).count());

		String template = "update rule set priority = %s, update_time = update_time where id in(%s);";

		String result = map.entrySet().stream()
				.map(entry -> {
					String key = entry.getKey();
					List<Integer> value = entry.getValue();
					return String.format(template, key, value.stream().map(Object::toString).collect(Collectors.joining(",")));
				})
				.collect(Collectors.joining("\n"));

		System.out.println(result);
	}

	@Test
	public void test_2() {
		String str = "112,344\t基础-油炸锅测试品-自行制作\t5\n" +
				"115\t基础-华北土豆丝鸡蛋饼-午餐-禁止制作\t5\n" +
				"182\t基础-新品自制饮品-自行制作\t5\n" +
				"15,160\t基础-其他豆浆-自行制作\t5\n" +
				"37\t基础-豆浆玉米汁-午餐晚餐-自行制作\t5\n" +
				"10,16\t基础-热餐-早餐-禁止制作\t5\n" +
				"6\t基础-酥饼-晚餐-禁止制作（华北）\t5\n" +
				"5,8,89\t基础-粥豆腐脑茶叶蛋油条-午餐晚餐-禁止制作\t5\n" +
				"13\t基础-小分类自行制作\t5\n" +
				"231\t基础-0314夜宵烧烤-自行制作\t5\n" +
				"14\t基础-冷冻菜-午餐晚餐-自行制作\t5\n" +
				"2\t基础-全部分类-夜间-禁止制作\t5\n" +
				"4,209,232\t基础-无FF区\t5\n" +
				"94,101,194,196,327,338,366,374,385,387,398,399,400,408,432,470,520,533,535,546,555,556\t基础-停业/撤店\t5\n" +
				"1,153\t基础-豆浆-早餐-自行制作\t5\n" +
				"345\t基础-炸烤制品-禁止制作\t5\n" +
				"72,329,375,422,478,540\t基础-热餐-禁止制作\t5\n" +
				"70,197,347,414,443,446,472,473,521,534\t热餐-晚餐-禁制制作\t2\n" +
				"71\t热餐-非工作日-禁制制作\t2\n" +
				"74\t热餐-非工作日-晚餐-禁制制作\t2\n" +
				"223,542\t基础-早餐关闭\t5\n" +
				"367,371,410\t基础-华北无温水保温柜门店0303 0502 0602禁止制作\t5\n" +
				"7,158,487,493,494\t基础-华北冷展柜门店0602-午餐-禁止制作\t5\n" +
				"11,202\t基础-0302禁止制作\t5\n" +
				"131\t工作日低销门店0602-午餐-禁止制作\t2\n" +
				"132\t非工作日低销门店0602-午餐-禁止制作\t2\n" +
				"133,164\t非工作日低销门店0601-午餐-禁止制作\t2\n" +
				"134,165\t非工作日低销门店0601-晚餐-禁止制作\t2\n" +
				"163\t工作日低销门店0601-晚餐-禁止制作\t2\n" +
				"162\t工作日低销门店0602-午餐-禁止制作\t2\n" +
				"135,166\t非工作日低销门店0501-晚餐-禁止制作\t2\n" +
				"136,167\t非工作日低销门店0302-晚餐-禁止制作\t2\n" +
				"168\t非工作日低销门店0302-午餐-禁止制作\t2\n" +
				"137\t油炸锅测试品-安心油条-正常制作\t2\n" +
				"12\t0502-禁止制作\t2\n" +
				"425\t0501-禁止制作\t2\n" +
				"441\t0602-禁制制作\t2\n" +
				"201,203\t基础-华东油炸锅测试店0302-自行制作\t5\n" +
				"479\t基础-只卖0501、0706\t5\n" +
				"550,551,553\t春节缩品\t2\n" +
				"815,1021,1062,1085,1107,1114,1115,1117,1121,1124,1125,1126,1130,1146,1147,1148,1149,1150,1156,1159,1160,1165,1166,1167,1168,1170,1196,1204,1206,1208,1209,1221,1222,1223,1224,1345,1366,1367,1368,1373,1387,1398,1465,1481,1520,1521,1570,1571,1610,1612,1634,1782,1815,1874,1971,2048,2049,2050,2051,2124,2192,2193,2240,\t中台输出开闭店信息\t3\n" +
				"2101,2152,2202\t财务测算闭店开关\t3\n" +
				"2203,2204,2153,2154,2024,2025\t李岩建议开启\t2\n" +
				"2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251\t财务测算分类餐段开关\t3\n" +
				"2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226\t李岩建议关闭\t4\n" +
				"1636\t春节/疫情期间缩品\t4\n" +
				"887,1007,1008,1015,1016,1017,1034,1035,1036,1037,1042,1043,1045,1046,1048,1049,1063,1108,1109,1110,1112,1113,1122,1123,1151,1157,1191,1192,1193,1225,1226,1227,1228,1232,1233,1234,1235,1236,1237,1238,1239,1240,1282,1285,1286,1287,1288,1289,1323,1324,1325,1326,1327,1328,1330,1331,1356,1357,1358,1360,1361,1362,1423,1450,1451,1452,1453,1454,1456,1457,1458,1459,1460,1461,1462,1463,1464,1483,1484,1486,1487,1488,1489,1490,1491,1526,1562,1563,1654,1655,1658,1659,1688,1781,1807,1829,1830,1879,1880,1929,2024,2025,2153,2154,2191,2203,2204\t节后分类餐段开启开关\t2\n" +
				"570,571,572,573,574,578,579,580,581,582,583,598,600,601,602,603,604,605,606,607,609,612,614,615,618,619,620,621,622,623,624,625,626,636,637,638,639,640,641,642,643,645,652,653,654,655,656,657,658,659,660,665,669,670,672,673,675,680,683,685,687,689,699,701,703,705,707,709,717,718,719,720,721,722,724,725,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,751,752,753,754,755,763,764,765,766,768,769,774,775,776,777,778,779,780,781,793,794,811,812,813,814,821,823,829,830,831,832,834,835,836,837,838,839,880,883,901,973,1018,1019,1076,1077,1078,1079,1082,1083,1084,1119,1190,1213,1244,1245,1246,1247,1248,1249,1250,1251,1322,1355,1493,1518,1564,1565,1566,1567,1573,1616,1684,1832,1930,1932,2195\t春节期间分类餐段关闭\t1\n" +
				"2200,2195,2230\t特殊\t4\n" +
				"2190,2196\t特殊\t4";

		String template = "update rule set priority = %s, rule_name = '%s', update_time = update_time where id in(%s);";

		List<String> allIds = Lists.newArrayList();

		String result = Splitter.on("\n").splitToList(str).stream()
				.map(one -> {
					List<String> datas = Splitter.on("\t").splitToList(one);

					String ids = datas.get(0);

					allIds.addAll(Splitter.on(",").splitToList(ids));

					return String.format(template, datas.get(2), datas.get(1), ids);
				})
				.collect(Collectors.joining("\n"));

		System.out.println(result);

		Map<String, List<String>> group = allIds.stream().collect(Collectors.groupingBy(x -> x));
		for (Map.Entry<String, List<String>> entry : group.entrySet()) {
			if (entry.getValue().size() > 1) {
				System.out.println(entry);
			}

		}
	}
}
